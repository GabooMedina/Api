/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces;

import FacturaFactory.Factura;
import FacturaFactory.FacturaDao;
import FacturaFactory.FacturaFactory;
import PersonaDao.User;
import PersonaDao.UserDAO;
import java.awt.Color;
import java.awt.Font;
import java.sql.Connection;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;


/**
 *
 * @author PERSONAL
 */
public class nuevaFactura extends javax.swing.JInternalFrame {

    /**
     * Creates new form nuevaFactura
     */
    DefaultTableModel modelo;
    DefaultComboBoxModel modeloCom;
    ArrayList mListaUsuarios;
    FacturaDao facturaDAO = new FacturaDao();
    String cedula = "";
    private Connection connection;

    public nuevaFactura() {
        initComponents();
        mListaUsuarios = new ArrayList();
        connection = PatronSingleton.conexion.getInstance().getConnection();
        llenarCBMaterias();
        agregarItem();
        bloquear();
        JTableHeader thead = jtblDetalle.getTableHeader();
        //thead.setBackground("rgb(23, 107, 135)");
        Color color = new Color(74, 85, 162);
        thead.setBackground(color);
        //thead.setForeground(Color.WHITE);
        thead.setFont(new Font("Tahome", Font.BOLD, 19));
        thead.setForeground(Color.WHITE);
        ((DefaultTableCellRenderer) thead.getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);

        String titulos[] = {"NOMBRES", "APELLIDOS", "LEC. ANTERIOR", "LEC. ACTUAL", "TIPO", "MES", "TOTAL", "ESTADO"};
        modelo = new DefaultTableModel(null, titulos);
        jtblDetalle.setModel(modelo);
    }

    public void bloquear() {
        jrbnConsumo.setEnabled(false);
        jrbnRiego.setEnabled(false);
        jrbnAmbos.setEnabled(false);
        jbtnCobro.setEnabled(false);
    }

    public void desbloquear() {
        jrbnConsumo.setEnabled(true);
        jrbnRiego.setEnabled(true);
        jrbnAmbos.setEnabled(true);
        jbtnCobro.setEnabled(true);
    }

    public void llenarCBMaterias() {
        //jcbxDatos.removeAllItems();
        UserDAO userDAO = new UserDAO();
        List<User> userList = userDAO.getAllUsers();
        for (User user : userList) {
            jcbxUsuarios.addItem(user);
        }

    }

    public void agregarItem() {
        String ciuadesdes[] = {"--SELECCIONE--", "CONSUMO Y RIEGO", "CONSUMO", "RIEGO"};
        modeloCom = new DefaultComboBoxModel(ciuadesdes);
        jcbxTipo.setModel(modeloCom);

    }

    String filtro = "";

    public void radiobutton() {
        if (jrbnMesActual.isSelected()) {
            filtro = "MESACTUAL";
        } else if (jrbnMesesPagados.isSelected()) {
            filtro = "MESPAGADOS";
        } else if (jrbnMesesPendientes.isSelected()) {
            filtro = "MESPENDIENTES";
        }
    }
    String valorCobro = "";

    public void cobro() {
        if (jrbnConsumo.isSelected()) {
            valorCobro = "CONSUMO";
        } else if (jrbnRiego.isSelected()) {
            valorCobro = "RIEGO";
        } else if (jrbnAmbos.isSelected()) {
            valorCobro = "AMBOS";
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jrbgFiltro = new javax.swing.ButtonGroup();
        jbgCobro = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jcbxTipo = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jcbxUsuarios = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jrbnMesesPagados = new javax.swing.JRadioButton();
        jrbnMesesPendientes = new javax.swing.JRadioButton();
        jrbnMesActual = new javax.swing.JRadioButton();
        jPanel5 = new javax.swing.JPanel();
        jMFactura = new com.toedter.calendar.JMonthChooser();
        jYFactura = new com.toedter.calendar.JYearChooser();
        jPanel3 = new javax.swing.JPanel();
        jbtnCobro = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblDetalle = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jrbnAmbos = new javax.swing.JRadioButton();
        jrbnRiego = new javax.swing.JRadioButton();
        jrbnConsumo = new javax.swing.JRadioButton();

        setBorder(null);
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Acciones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("TIPO:");

        jcbxTipo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("SELECCIONAR USUARIO:");

        jcbxUsuarios.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton2.setText("SIGUIENTE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Buscar por:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        jrbgFiltro.add(jrbnMesesPagados);
        jrbnMesesPagados.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jrbnMesesPagados.setText("MESES PAGADOS");

        jrbgFiltro.add(jrbnMesesPendientes);
        jrbnMesesPendientes.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jrbnMesesPendientes.setText("MESES PENDIENTES");

        jrbgFiltro.add(jrbnMesActual);
        jrbnMesActual.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jrbnMesActual.setText("MES");

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Fecha", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 10), new java.awt.Color(14, 41, 84))); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(0, 36, Short.MAX_VALUE)
                .addComponent(jYFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jMFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jMFactura, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jYFactura, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jrbnMesActual)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64)
                .addComponent(jrbnMesesPagados)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addComponent(jrbnMesesPendientes)
                .addGap(40, 40, 40))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jrbnMesesPagados)
                            .addComponent(jrbnMesesPendientes)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jrbnMesActual))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(jButton2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jcbxUsuarios, 0, 340, Short.MAX_VALUE)
                            .addComponent(jcbxTipo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(146, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jcbxTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jcbxUsuarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(65, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(89, 89, 89))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Detalle", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 13))); // NOI18N

        jbtnCobro.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jbtnCobro.setText("COBRAR");
        jbtnCobro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCobroActionPerformed(evt);
            }
        });

        jtblDetalle.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jtblDetalle.setGridColor(new java.awt.Color(23, 107, 135));
        jtblDetalle.setRowHeight(20);
        jScrollPane1.setViewportView(jtblDetalle);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(9, 5, 128));
        jLabel5.setText("jLabel5");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("TOTAL A PAGAR:");

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cobrar:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        jbgCobro.add(jrbnAmbos);
        jrbnAmbos.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jrbnAmbos.setText("CONSUMO/RIEGO");

        jbgCobro.add(jrbnRiego);
        jrbnRiego.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jrbnRiego.setText("RIEGO");

        jbgCobro.add(jrbnConsumo);
        jrbnConsumo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jrbnConsumo.setText("CONSUMO");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jrbnConsumo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 140, Short.MAX_VALUE)
                .addComponent(jrbnRiego)
                .addGap(133, 133, 133)
                .addComponent(jrbnAmbos)
                .addGap(23, 23, 23))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jrbnAmbos)
                    .addComponent(jrbnRiego)
                    .addComponent(jrbnConsumo))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1103, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addGap(170, 170, 170))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jbtnCobro, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 32, Short.MAX_VALUE)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbtnCobro, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21))))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 878, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        cargarTabla();

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jbtnCobroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCobroActionPerformed
        try {
            // TODO add your handling code here:
            cobro();

            String MES[] = {"ENERO", "FEBRERO", "MARZO", "ABRIL", "MAYO", "JUNIO", "JULIO", "AGOSTO", "SEPTIEMBRE", "OCTUBRE", "NOVIEMBRE", "DICIEMBRE"};
            String año = "" + jYFactura.getYear() + "/" + MES[jMFactura.getMonth()] + "";
            User mUsuarios = (User) jcbxUsuarios.getSelectedItem();
            cedula = String.valueOf(mUsuarios.getCedula());
            
            /////////////RIEGO///////
            String valorRiego = "";
            String sqlRiego = "SELECT F.EST_FACT\n"
                    + "FROM FACTURAS F, LECTURAS L, USUARIOS U\n"
                    + "WHERE F.ID_LEC_PER = L.ID_LEC\n"
                    + "AND L.TIPO_LEC='RIEGO'\n"
                    + "AND L.MES_CON='" + año + "'\n"
                    + "AND L.CED_USU_PER = U.CED_USU\n"
                    + "AND U.CED_USU='" + cedula + "'";

            Statement psdRiego = connection.createStatement();
            ResultSet rs = psdRiego.executeQuery(sqlRiego);
            while (rs.next()) {
                valorRiego = rs.getString("EST_FACT");

            }
            //////////////////////////////////////////////7////
            /////////////CONSUMO///////
            String valorConsumo = "";
            String sqlConsumo = "SELECT F.EST_FACT\n"
                    + "FROM FACTURAS F, LECTURAS L, USUARIOS U\n"
                    + "WHERE F.ID_LEC_PER = L.ID_LEC\n"
                    + "AND L.TIPO_LEC='CONSUMO'\n"
                    + "AND L.MES_CON='" + año + "'\n"
                    + "AND L.CED_USU_PER = U.CED_USU\n"
                    + "AND U.CED_USU='" + cedula + "'";

            Statement psdConsumo = connection.createStatement();
            ResultSet rsC = psdConsumo.executeQuery(sqlConsumo);
            while (rsC.next()) {
                valorConsumo = rsC.getString("EST_FACT");

            }

            if (valorCobro.equals("AMBOS")) {
                if (valorRiego.equals("PAGADO") || valorConsumo.equals("PAGADO")) {
                    JOptionPane.showMessageDialog(null, "RIEGO O CONSUMO PAGADO");
                } else {
                    int resp = JOptionPane.showConfirmDialog(this, "Seguro de cobrar consumo y riego?", "AVISO",
                            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                    if (resp == JOptionPane.YES_OPTION) {
                        Factura fac = FacturaFactory.crearFactura("riego", cedula, año, Date.valueOf(LocalDate.now()), "");
                        facturaDAO.cobrarDosTiposFacturas(fac);
                        cargarTabla();
                    }

                }

            } else if (valorCobro.equals("CONSUMO")) {
                if (valorConsumo.equals("PAGADO")) {
                    JOptionPane.showMessageDialog(null, "FacturaPagada");
                } else {
                    int resp = JOptionPane.showConfirmDialog(this, "Seguro de cobrar consumo?", "AVISO",
                            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                    if (resp == JOptionPane.YES_OPTION) {
                        Factura facturaConsumo = FacturaFactory.crearFactura("consumo", cedula, año, Date.valueOf(LocalDate.now()), valorCobro);
                        facturaDAO.cobrarFacturaConsumoRiego(facturaConsumo);
                        cargarTabla();
                    }

                }
            } else if (valorCobro.equals("RIEGO")) {

                if (valorRiego.equals("PAGADO")) {
                    JOptionPane.showMessageDialog(null, "Factura Pagada");

                } else {
                    int resp = JOptionPane.showConfirmDialog(this, "Seguro de cobrar riego?", "AVISO",
                            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                    if (resp == JOptionPane.YES_OPTION) {
                        Factura facturaConsumo = FacturaFactory.crearFactura("riego", cedula, año, Date.valueOf(LocalDate.now()), valorCobro);
                        facturaDAO.cobrarFacturaConsumoRiego(facturaConsumo);
                        cargarTabla();
                    }

                }

            }
        } catch (SQLException ex) {
            Logger.getLogger(nuevaFactura.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jbtnCobroActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private com.toedter.calendar.JMonthChooser jMFactura;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JYearChooser jYFactura;
    private javax.swing.ButtonGroup jbgCobro;
    private javax.swing.JButton jbtnCobro;
    private javax.swing.JComboBox<String> jcbxTipo;
    private javax.swing.JComboBox<User> jcbxUsuarios;
    private javax.swing.ButtonGroup jrbgFiltro;
    private javax.swing.JRadioButton jrbnAmbos;
    private javax.swing.JRadioButton jrbnConsumo;
    private javax.swing.JRadioButton jrbnMesActual;
    private javax.swing.JRadioButton jrbnMesesPagados;
    private javax.swing.JRadioButton jrbnMesesPendientes;
    private javax.swing.JRadioButton jrbnRiego;
    private javax.swing.JTable jtblDetalle;
    // End of variables declaration//GEN-END:variables
    public void recorrerTabla() {
        float fila = 0;
        float total = 0;

        for (int i = 0; i < jtblDetalle.getRowCount(); i++) {

            if (jtblDetalle.getValueAt(i, 8).toString().equals("PENDIENTE")) {
                fila = Float.parseFloat(jtblDetalle.getValueAt(i, 7).toString());
                total += fila;
            }

        }
        jLabel5.setText(String.valueOf(total).toString());

    }

    private void cargarTabla() {
        String[] registros = new String[9];
        String sql = "";
        radiobutton();
        DefaultTableModel modelo = new DefaultTableModel();
        String titulos[] = {"NOMBRES", "APELLIDOS", "LEC. ANTERIOR", "LEC. ACTUAL", "EXCESO", "TIPO", "MES", "TOTAL", "ESTADO"};
        modelo = new DefaultTableModel(null, titulos);
        try {

            String MES[] = {"ENERO", "FEBRERO", "MARZO", "ABRIL", "MAYO", "JUNIO", "JULIO", "AGOSTO", "SEPTIEMBRE", "OCTUBRE", "NOVIEMBRE", "DICIEMBRE"};
            String año = "" + jYFactura.getYear() + "/" + MES[jMFactura.getMonth()] + "";
            System.out.println(año);
            User mUsuarios = (User) jcbxUsuarios.getSelectedItem();
            cedula = String.valueOf(mUsuarios.getCedula());
            System.out.println(cedula);

            

            if (jcbxTipo.getSelectedItem() == "--SELECCIONE--") {
                JOptionPane.showMessageDialog(this, "SELECCIONE EL TIPO");
            } else if (jrbgFiltro.isSelected(null)) {
                JOptionPane.showMessageDialog(this, "SELECCIONE EL FILTRO");

            } else if (jcbxTipo.getSelectedItem() == "CONSUMO Y RIEGO" && "MESACTUAL".equals(filtro)) {
                System.out.println("jhola");
                sql = "SELECT U.*, L.*,F.*\n"
                        + "FROM USUARIOS U, LECTURAS L, FACTURAS F\n"
                        + "WHERE U.CED_USU=L.CED_USU_PER\n"
                        + "AND L.ID_LEC=F.ID_LEC_PER\n"
                        + "AND L.MES_CON='" + año + "'\n"
                        + "AND U.CED_USU='" + cedula + "'";
                Statement psd = connection.createStatement();
                ResultSet rs = psd.executeQuery(sql);
                while (rs.next()) {
                    registros[0] = rs.getString("NOM_USU");
                    registros[1] = rs.getString("APE_USU");
                    registros[2] = rs.getString("LEC_ANT");
                    registros[3] = rs.getString("LEC_ACT");
                    registros[4] = rs.getString("EXC_LEC");
                    registros[5] = rs.getString("TIPO_LEC");
                    registros[6] = rs.getString("MES_CON");
                    registros[7] = rs.getString("TOTAL");
                    registros[8] = rs.getString("EST_FACT");
                    modelo.addRow(registros);
                    desbloquear();
                }

                jtblDetalle.setModel(modelo);

                if (jtblDetalle.getRowCount() == 0) {
                    bloquear();
                }
                recorrerTabla();

            } else if (jcbxTipo.getSelectedItem() == "CONSUMO Y RIEGO" && filtro == "MESPENDIENTES") {
                sql = "SELECT U.*, L.*,F.*\n"
                        + "FROM USUARIOS U, LECTURAS L, FACTURAS F\n"
                        + "WHERE U.CED_USU=L.CED_USU_PER\n"
                        + "AND L.ID_LEC=F.ID_LEC_PER\n"
                        + "AND F.EST_FACT='PENDIENTE'\n"
                        + "AND U.CED_USU='" + cedula + "'";
                Statement psd = connection.createStatement();
                ResultSet rs = psd.executeQuery(sql);
                while (rs.next()) {
                    registros[0] = rs.getString("NOM_USU");
                    registros[1] = rs.getString("APE_USU");
                    registros[2] = rs.getString("LEC_ANT");
                    registros[3] = rs.getString("LEC_ACT");
                    registros[4] = rs.getString("EXC_LEC");
                    registros[5] = rs.getString("TIPO_LEC");
                    registros[6] = rs.getString("MES_CON");
                    registros[7] = rs.getString("TOTAL");
                    registros[8] = rs.getString("EST_FACT");
                    modelo.addRow(registros);
                    desbloquear();
                }

                jtblDetalle.setModel(modelo);

                if (jtblDetalle.getRowCount() == 0) {
                    bloquear();
                }
                recorrerTabla();
            } else if (jcbxTipo.getSelectedItem() == "CONSUMO Y RIEGO" && filtro == "MESPAGADOS") {
                sql = "SELECT U.*, L.*,F.*\n"
                        + "FROM USUARIOS U, LECTURAS L, FACTURAS F\n"
                        + "WHERE U.CED_USU=L.CED_USU_PER\n"
                        + "AND L.ID_LEC=F.ID_LEC_PER\n"
                        + "AND F.EST_FACT='PAGADO'\n"
                        + "AND L.FEC_LEC LIKE '" + jYFactura.getYear() + "%'\n"
                        + "AND U.CED_USU='" + cedula + "'";
                Statement psd = connection.createStatement();
                ResultSet rs = psd.executeQuery(sql);
                while (rs.next()) {
                    registros[0] = rs.getString("NOM_USU");
                    registros[1] = rs.getString("APE_USU");
                    registros[2] = rs.getString("LEC_ANT");
                    registros[3] = rs.getString("LEC_ACT");
                    registros[4] = rs.getString("EXC_LEC");
                    registros[5] = rs.getString("TIPO_LEC");
                    registros[6] = rs.getString("MES_CON");
                    registros[7] = rs.getString("TOTAL");
                    registros[8] = rs.getString("EST_FACT");
                    modelo.addRow(registros);
                    bloquear();
                }

                jtblDetalle.setModel(modelo);

                if (jtblDetalle.getRowCount() == 0) {
                    bloquear();
                }
                jLabel5.setText("");
            } //CONSUMO
            else if (jcbxTipo.getSelectedItem() == "CONSUMO" && filtro == "MESACTUAL") {
                sql = "SELECT U.*, L.*,F.*\n"
                        + "FROM USUARIOS U, LECTURAS L, FACTURAS F\n"
                        + "WHERE U.CED_USU=L.CED_USU_PER\n"
                        + "AND L.ID_LEC=F.ID_LEC_PER\n"
                        + "AND L.MES_CON='" + año + "'\n"
                        + "AND L.TIPO_LEC='" + jcbxTipo.getSelectedItem().toString() + "'\n"
                        + "AND U.CED_USU='" + cedula + "'";
                Statement psd = connection.createStatement();
                ResultSet rs = psd.executeQuery(sql);
                while (rs.next()) {
                    registros[0] = rs.getString("NOM_USU");
                    registros[1] = rs.getString("APE_USU");
                    registros[2] = rs.getString("LEC_ANT");
                    registros[3] = rs.getString("LEC_ACT");
                    registros[4] = rs.getString("EXC_LEC");
                    registros[5] = rs.getString("TIPO_LEC");
                    registros[6] = rs.getString("MES_CON");
                    registros[7] = rs.getString("TOTAL");
                    registros[8] = rs.getString("EST_FACT");
                    modelo.addRow(registros);
                    desbloquear();
                }

                jtblDetalle.setModel(modelo);

                if (jtblDetalle.getRowCount() == 0) {
                    bloquear();
                }
                recorrerTabla();
            } //riego
            else if (jcbxTipo.getSelectedItem() == "RIEGO" && filtro == "MESACTUAL") {
                sql = "SELECT U.*, L.*,F.*\n"
                        + "FROM USUARIOS U, LECTURAS L, FACTURAS F\n"
                        + "WHERE U.CED_USU=L.CED_USU_PER\n"
                        + "AND L.ID_LEC=F.ID_LEC_PER\n"
                        + "AND L.MES_CON='" + año + "'\n"
                        + "AND L.TIPO_LEC='" + jcbxTipo.getSelectedItem().toString() + "'\n"
                        + "AND U.CED_USU='" + cedula + "'";
                Statement psd = connection.createStatement();
                ResultSet rs = psd.executeQuery(sql);
                while (rs.next()) {
                    registros[0] = rs.getString("NOM_USU");
                    registros[1] = rs.getString("APE_USU");
                    registros[2] = rs.getString("LEC_ANT");
                    registros[3] = rs.getString("LEC_ACT");
                    registros[4] = rs.getString("EXC_LEC");
                    registros[5] = rs.getString("TIPO_LEC");
                    registros[6] = rs.getString("MES_CON");
                    registros[7] = rs.getString("TOTAL");
                    registros[8] = rs.getString("EST_FACT");
                    modelo.addRow(registros);
                    desbloquear();
                }

                jtblDetalle.setModel(modelo);

                if (jtblDetalle.getRowCount() == 0) {
                    bloquear();
                }
                recorrerTabla();
            } else if (jcbxTipo.getSelectedItem() == "CONSUMO" && filtro == "MESPENDIENTES") {
                sql = "SELECT U.*, L.*,F.*\n"
                        + "FROM USUARIOS U, LECTURAS L, FACTURAS F\n"
                        + "WHERE U.CED_USU=L.CED_USU_PER\n"
                        + "AND L.ID_LEC=F.ID_LEC_PER\n"
                        + "AND F.EST_FACT='PENDIENTE'\n"
                        + "AND L.TIPO_LEC='" + jcbxTipo.getSelectedItem().toString() + "'\n"
                        + "AND U.CED_USU='" + cedula + "'";
                Statement psd = connection.createStatement();
                ResultSet rs = psd.executeQuery(sql);
                while (rs.next()) {
                    registros[0] = rs.getString("NOM_USU");
                    registros[1] = rs.getString("APE_USU");
                    registros[2] = rs.getString("LEC_ANT");
                    registros[3] = rs.getString("LEC_ACT");
                    registros[4] = rs.getString("EXC_LEC");
                    registros[5] = rs.getString("TIPO_LEC");
                    registros[6] = rs.getString("MES_CON");
                    registros[7] = rs.getString("TOTAL");
                    registros[8] = rs.getString("EST_FACT");
                    modelo.addRow(registros);
                    desbloquear();
                }

                jtblDetalle.setModel(modelo);

                if (jtblDetalle.getRowCount() == 0) {
                    bloquear();
                }
                recorrerTabla();
            } //RIEGO
            else if (jcbxTipo.getSelectedItem() == "RIEGO" && filtro == "MESPENDIENTES") {
                sql = "SELECT U.*, L.*,F.*\n"
                        + "FROM USUARIOS U, LECTURAS L, FACTURAS F\n"
                        + "WHERE U.CED_USU=L.CED_USU_PER\n"
                        + "AND L.ID_LEC=F.ID_LEC_PER\n"
                        + "AND F.EST_FACT='PENDIENTE'\n"
                        + "AND L.TIPO_LEC='" + jcbxTipo.getSelectedItem().toString() + "'\n"
                        + "AND U.CED_USU='" + cedula + "'";
                Statement psd = connection.createStatement();
                ResultSet rs = psd.executeQuery(sql);
                while (rs.next()) {
                    registros[0] = rs.getString("NOM_USU");
                    registros[1] = rs.getString("APE_USU");
                    registros[2] = rs.getString("LEC_ANT");
                    registros[3] = rs.getString("LEC_ACT");
                    registros[4] = rs.getString("EXC_LEC");
                    registros[5] = rs.getString("TIPO_LEC");
                    registros[6] = rs.getString("MES_CON");
                    registros[7] = rs.getString("TOTAL");
                    registros[8] = rs.getString("EST_FACT");
                    modelo.addRow(registros);
                    desbloquear();
                }

                jtblDetalle.setModel(modelo);

                if (jtblDetalle.getRowCount() == 0) {
                    bloquear();
                }
                recorrerTabla();
            } else if (jcbxTipo.getSelectedItem() == "CONSUMO" && filtro == "MESPAGADOS") {
                sql = "SELECT U.*, L.*,F.*\n"
                        + "FROM USUARIOS U, LECTURAS L, FACTURAS F\n"
                        + "WHERE U.CED_USU=L.CED_USU_PER\n"
                        + "AND L.ID_LEC=F.ID_LEC_PER\n"
                        + "AND L.FEC_LEC LIKE '" + jYFactura.getYear() + "%'\n"
                        + "AND L.TIPO_LEC='" + jcbxTipo.getSelectedItem().toString() + "'\n"
                        + "AND U.CED_USU='" + cedula + "'";
                bloquear();
                Statement psd = connection.createStatement();
                ResultSet rs = psd.executeQuery(sql);
                while (rs.next()) {
                    registros[0] = rs.getString("NOM_USU");
                    registros[1] = rs.getString("APE_USU");
                    registros[2] = rs.getString("LEC_ANT");
                    registros[3] = rs.getString("LEC_ACT");
                    registros[4] = rs.getString("EXC_LEC");
                    registros[5] = rs.getString("TIPO_LEC");
                    registros[6] = rs.getString("MES_CON");
                    registros[7] = rs.getString("TOTAL");
                    registros[8] = rs.getString("EST_FACT");
                    modelo.addRow(registros);

                }

                jtblDetalle.setModel(modelo);

                if (jtblDetalle.getRowCount() > 0) {
                    bloquear();
                }
                jLabel5.setText("");
            } else if (jcbxTipo.getSelectedItem() == "RIEGO" && filtro == "MESPAGADOS") {
                sql = "SELECT U.*, L.*,F.*\n"
                        + "FROM USUARIOS U, LECTURAS L, FACTURAS F\n"
                        + "WHERE U.CED_USU=L.CED_USU_PER\n"
                        + "AND L.ID_LEC=F.ID_LEC_PER\n"
                        + "AND L.TIPO_LEC='" + jcbxTipo.getSelectedItem().toString() + "'\n"
                        + "AND L.FEC_LEC LIKE '" + jYFactura.getYear() + "%'\n"
                        + "AND U.CED_USU='" + cedula + "'";
                bloquear();
                Statement psd = connection.createStatement();
                ResultSet rs = psd.executeQuery(sql);
                while (rs.next()) {
                    registros[0] = rs.getString("NOM_USU");
                    registros[1] = rs.getString("APE_USU");
                    registros[2] = rs.getString("LEC_ANT");
                    registros[3] = rs.getString("LEC_ACT");
                    registros[4] = rs.getString("EXC_LEC");
                    registros[5] = rs.getString("TIPO_LEC");
                    registros[6] = rs.getString("MES_CON");
                    registros[7] = rs.getString("TOTAL");
                    registros[8] = rs.getString("EST_FACT");
                    modelo.addRow(registros);

                }

                jtblDetalle.setModel(modelo);

                if (jtblDetalle.getRowCount() > 0) {
                    bloquear();
                }
                jLabel5.setText("");
            }

            //String sql = "SELECT U.*, L.* FROM USUARIOS U, LECTURAS L WHERE U.CED_USU = L.CED_USU_PER AND TIPO_LEC='"+lectura+"' AND MES_CON='"+mes+"' ORDER BY APE_USU ASC";
        } catch (SQLException ex) {
            //JOptionPane.showMessageDialog(null, ex);
        }

    }
}
